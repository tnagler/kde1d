[{"path":"https://tnagler.github.io/kde1d/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Nagler. Author, maintainer. Thibault Vatter. Author.","code":""},{"path":"https://tnagler.github.io/kde1d/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nagler T, Vatter T (2024). kde1d: Univariate Kernel Density Estimation. R package version 1.1.0, https://tnagler.github.io/kde1d.","code":"@Manual{,   title = {kde1d: Univariate Kernel Density Estimation},   author = {Thomas Nagler and Thibault Vatter},   year = {2024},   note = {R package version 1.1.0},   url = {https://tnagler.github.io/kde1d}, }"},{"path":[]},{"path":"https://tnagler.github.io/kde1d/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Univariate Kernel Density Estimation","text":"implements univariate kernel density estimator can handle bounded, discrete, zero-inflated data. provides classical kernel density well log-linear log-quadratic methods. highly efficient due Fast Fourier Transform, spline interpolation, C++ backend. details, see API documentation.","code":""},{"path":"https://tnagler.github.io/kde1d/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install","title":"Univariate Kernel Density Estimation","text":"stable release CRAN: latest development version:","code":"install.packages(\"kde1d\") # install.packages(\"remotes\") remotes::install_github(\"tnagler/kde1d@dev\")"},{"path":[]},{"path":"https://tnagler.github.io/kde1d/index.html","id":"unbounded-data","dir":"","previous_headings":"Examples","what":"Unbounded data","title":"Univariate Kernel Density Estimation","text":"","code":"x <- rnorm(100)                    # simulate data fit <- kde1d(x)                    # estimate density dkde1d(0, fit)                     # evaluate density estimate summary(fit)                       # information about the estimate plot(fit)                          # plot the density estimate curve(dnorm(x), add = TRUE,        # add true density       col = \"red\")"},{"path":"https://tnagler.github.io/kde1d/index.html","id":"bounded-data-log-linear","dir":"","previous_headings":"Examples","what":"Bounded data, log-linear","title":"Univariate Kernel Density Estimation","text":"","code":"x <- rgamma(100, shape = 1)        # simulate data fit <- kde1d(x, xmin = 0, deg = 1) # estimate density dkde1d(seq(0, 5, by = 1), fit)     # evaluate density estimate summary(fit)                       # information about the estimate plot(fit)                          # plot the density estimate curve(dgamma(x, shape = 1),        # add true density       add = TRUE, col = \"red\",       from = 1e-3)"},{"path":"https://tnagler.github.io/kde1d/index.html","id":"discrete-data","dir":"","previous_headings":"Examples","what":"Discrete data","title":"Univariate Kernel Density Estimation","text":"","code":"x <- rbinom(100, size = 5, prob = 0.5)  # simulate data x <- ordered(x, levels = 0:5)           # declare as ordered fit <- kde1d(x, xmin = 0, xmax = 5,     # estimate density             type = \"discrete\")  fit <- kde1d(ordered(x, levels = 0:5))  # alternative API dkde1d(sort(unique(x)), fit)            # evaluate density estimate summary(fit)                            # information about the estimate plot(fit)                               # plot the density estimate points(ordered(0:5, 0:5),               # add true density        dbinom(0:5, 5, 0.5), col = \"red\")"},{"path":"https://tnagler.github.io/kde1d/index.html","id":"zero-inflated-data-data","dir":"","previous_headings":"Examples","what":"Zero-inflated data data","title":"Univariate Kernel Density Estimation","text":"","code":"x <- rexp(500, 0.5)                    # simulate data x[sample(1:500, 200)] <- 0             # add zero-inflation fit <- kde1d(x, xmin = 0, type = \"zi\") # estimate density plot(fit)                              # plot the density estimate lines(                                 # add true density           seq(0, 20, l = 100),   0.6 * dexp(seq(0, 20, l = 100), 0.5),   col = \"red\" ) points(0, 0.4, col = \"red\")"},{"path":"https://tnagler.github.io/kde1d/index.html","id":"weighted-estimate","dir":"","previous_headings":"Examples","what":"Weighted estimate","title":"Univariate Kernel Density Estimation","text":"","code":"x <- rnorm(100)                         # simulate data weights <- rexp(100)                    # weights as in Bayesian bootstrap fit <- kde1d(x, weights = weights)      # weighted fit plot(fit)                               # compare with unweighted fit lines(kde1d(x), col = 2)"},{"path":"https://tnagler.github.io/kde1d/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Univariate Kernel Density Estimation","text":"Geenens, G. (2014). Probit transformation kernel density estimation unit interval. Journal American Statistical Association, 109:505, 346-358, arXiv:1303.4121 Geenens, G., Wang, C. (2018). Local-likelihood transformation kernel density estimation positive random variables. Journal Computational Graphical Statistics, 27(4), 822-835. arXiv:1602.04862 Loader, C. (2006). Local regression likelihood. Springer Science & Business Media. Nagler, T. (2018a). generic approach nonparametric function estimation mixed data. Statistics & Probability Letters, 137:326–330, arXiv:1704.07457 Nagler, T. (2018b). Asymptotic analysis jittering kernel density estimator. Mathematical Methods Statistics, 27, 32-46. arXiv:1705.05431","code":""},{"path":"https://tnagler.github.io/kde1d/reference/dkde1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Working with a kde1d object — dkde1d","title":"Working with a kde1d object — dkde1d","text":"Density, distribution function, quantile function random generation 'kde1d' kernel density estimate.","code":""},{"path":"https://tnagler.github.io/kde1d/reference/dkde1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Working with a kde1d object — dkde1d","text":"","code":"dkde1d(x, obj)  pkde1d(q, obj)  qkde1d(p, obj)  rkde1d(n, obj, quasi = FALSE)"},{"path":"https://tnagler.github.io/kde1d/reference/dkde1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Working with a kde1d object — dkde1d","text":"x vector density evaluation points. obj kde1d object. q vector quantiles. p vector probabilities. n integer; number observations. quasi logical; default (FALSE) returns pseudo-random numbers, use TRUE quasi-random numbers (generalized Halton, see randtoolbox::sobol()).","code":""},{"path":"https://tnagler.github.io/kde1d/reference/dkde1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Working with a kde1d object — dkde1d","text":"density, distribution function quantile functions estimates evaluated respectively x, q, p, sample n random deviates estimated kernel density.","code":""},{"path":"https://tnagler.github.io/kde1d/reference/dkde1d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Working with a kde1d object — dkde1d","text":"dkde1d() gives density, pkde1d() gives distribution function, qkde1d() gives quantile function, rkde1d() generates random deviates. length result determined n rkde1d(), length numerical argument functions.","code":""},{"path":[]},{"path":"https://tnagler.github.io/kde1d/reference/dkde1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Working with a kde1d object — dkde1d","text":"","code":"set.seed(0) # for reproducibility x <- rnorm(100) # simulate some data fit <- kde1d(x) # estimate density dkde1d(0, fit) # evaluate density estimate (close to dnorm(0)) #> [1] 0.4495823 pkde1d(0, fit) # evaluate corresponding cdf (close to pnorm(0)) #> [1] 0.5008513 qkde1d(0.5, fit) # quantile function (close to qnorm(0)) #> [1] -0.001893213 hist(rkde1d(100, fit)) # simulate"},{"path":"https://tnagler.github.io/kde1d/reference/equi_jitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditionally equidistant jittering — equi_jitter","title":"Conditionally equidistant jittering — equi_jitter","text":"Converts ordered variables numeric Adds deterministic uniform noise. See Details.","code":""},{"path":"https://tnagler.github.io/kde1d/reference/equi_jitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditionally equidistant jittering — equi_jitter","text":"","code":"equi_jitter(x)"},{"path":"https://tnagler.github.io/kde1d/reference/equi_jitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditionally equidistant jittering — equi_jitter","text":"x observations; function nothing x already numeric.","code":""},{"path":"https://tnagler.github.io/kde1d/reference/equi_jitter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditionally equidistant jittering — equi_jitter","text":"Jittering makes discrete variables continuous adding noise. simple trick allows consistently estimate densities tools designed continuous case (see, Nagler, 2018a/b). drawback estimates random noise may deteriorate estimate chance. , add form deterministic noise makes estimators well behaved. Tied occurences factor level spread uniformly (.e., equidistantly) interval \\([-0.5, 0.5]\\). similar adding random noise uniformly distributed, conditional observed outcome. Integrating outcome, one can check unconditional noise distribution also uniform \\([-0.5, 0.5]\\). Asymptotically, deterministic jittering variant equivalent random one.","code":""},{"path":"https://tnagler.github.io/kde1d/reference/equi_jitter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Conditionally equidistant jittering — equi_jitter","text":"Nagler, T. (2018a). generic approach nonparametric function estimation mixed data. Statistics & Probability Letters, 137:326–330, arXiv:1704.07457 Nagler, T. (2018b). Asymptotic analysis jittering kernel density estimator. Mathematical Methods Statistics, press, arXiv:1705.05431","code":""},{"path":"https://tnagler.github.io/kde1d/reference/equi_jitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditionally equidistant jittering — equi_jitter","text":"","code":"x <- as.factor(rbinom(10, 1, 0.5)) equi_jitter(x) #>  [1] 1.7000000 1.9000000 0.6428571 0.7857143 0.9285714 1.0714286 2.1000000 #>  [8] 1.2142857 2.3000000 1.3571429"},{"path":"https://tnagler.github.io/kde1d/reference/kde1d-package.html","id":null,"dir":"Reference","previous_headings":"","what":"One-Dimensional Kernel Density Estimation — kde1d-package","title":"One-Dimensional Kernel Density Estimation — kde1d-package","text":"Provides efficient implementation univariate local polynomial kernel density estimators can handle bounded, discrete, zero-inflated data. implementation utilizes spline interpolation reduce memory usage computational demand large data sets.","code":""},{"path":"https://tnagler.github.io/kde1d/reference/kde1d-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"One-Dimensional Kernel Density Estimation — kde1d-package","text":"Geenens, G. (2014). Probit transformation kernel density estimation unit interval. Journal American Statistical Association, 109:505, 346-358, arXiv:1303.4121 Geenens, G., Wang, C. (2018). Local-likelihood transformation kernel density estimation positive random variables. Journal Computational Graphical Statistics, 27(4), 822-835. arXiv:1602.04862 Nagler, T. (2018a). generic approach nonparametric function estimation mixed data. Statistics & Probability Letters, 137:326–330, arXiv:1704.07457 Nagler, T. (2018b). Asymptotic analysis jittering kernel density estimator. Mathematical Methods Statistics, 27, 32-46. arXiv:1705.05431","code":""},{"path":"https://tnagler.github.io/kde1d/reference/kde1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate local-polynomial likelihood kernel density estimation — kde1d","title":"Univariate local-polynomial likelihood kernel density estimation — kde1d","text":"estimators can handle data bounded, unbounded, discrete support, see Details.","code":""},{"path":"https://tnagler.github.io/kde1d/reference/kde1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate local-polynomial likelihood kernel density estimation — kde1d","text":"","code":"kde1d(   x,   xmin = NaN,   xmax = NaN,   type = \"continuous\",   mult = 1,   bw = NA,   deg = 2,   weights = numeric(0) )"},{"path":"https://tnagler.github.io/kde1d/reference/kde1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate local-polynomial likelihood kernel density estimation — kde1d","text":"x vector (one-column matrix/data frame) observations; can numeric ordered. xmin lower bound support density (continuous data); NaN means boundary. xmax upper bound support density (continuous data); NaN means boundary. type variable type; must one c, cont, continuous continuous variables, one d, disc, discrete discrete integer variables, one zi, zinfl, zero-inflated zero-inflated variables. mult positive bandwidth multiplier; actual bandwidth used \\(bw*mult\\). bw bandwidth parameter; positive number NA; latter uses plug-methodology Sheather Jones (1991) appropriate modifications deg > 0. deg degree polynomial; either 0, 1, 2 log-constant, log-linear, log-quadratic fitting, respectively. weights optional vector weights individual observations.","code":""},{"path":"https://tnagler.github.io/kde1d/reference/kde1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate local-polynomial likelihood kernel density estimation — kde1d","text":"object class kde1d.","code":""},{"path":"https://tnagler.github.io/kde1d/reference/kde1d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Univariate local-polynomial likelihood kernel density estimation — kde1d","text":"Gaussian kernel used cases. xmin xmax finite, density estimate 0 outside \\([xmin, xmax]\\). log-transform used one boundary (see, Geenens Wang, 2018); probit transform used two (see, Geenens, 2014). Discrete variables handled via jittering (see, Nagler, 2018a, 2018b). specific form deterministic jittering used, see equi_jitter(). Zero-inflated densities estimated hurdle-model discrete mass 0 remainder estimated type = \"continuous\".","code":""},{"path":"https://tnagler.github.io/kde1d/reference/kde1d.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Univariate local-polynomial likelihood kernel density estimation — kde1d","text":"Geenens, G. (2014). Probit transformation kernel density estimation unit interval. Journal American Statistical Association, 109:505, 346-358, arXiv:1303.4121 Geenens, G., Wang, C. (2018). Local-likelihood transformation kernel density estimation positive random variables. Journal Computational Graphical Statistics, appear, arXiv:1602.04862 Nagler, T. (2018a). generic approach nonparametric function estimation mixed data. Statistics & Probability Letters, 137:326–330, arXiv:1704.07457 Nagler, T. (2018b). Asymptotic analysis jittering kernel density estimator. Mathematical Methods Statistics, press, arXiv:1705.05431 Sheather, S. J. Jones, M. C. (1991). reliable data-based bandwidth selection method kernel density estimation. Journal Royal Statistical Society, Series B, 53, 683–690.","code":""},{"path":[]},{"path":"https://tnagler.github.io/kde1d/reference/kde1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Univariate local-polynomial likelihood kernel density estimation — kde1d","text":"","code":"## unbounded data x <- rnorm(500) # simulate data fit <- kde1d(x) # estimate density dkde1d(0, fit) # evaluate density estimate #> [1] 0.3959919 summary(fit) # information about the estimate #> kernel density estimate ('kde1d'), log-quadratic #> ----------------------------------------------------------------- #> nobs = 500, bw = 0.7, mult = 1, loglik = -712, d.f. = 4.5 plot(fit) # plot the density estimate curve(dnorm(x),   add = TRUE, # add true density   col = \"red\" )   ## bounded data, log-linear x <- rgamma(500, shape = 1) # simulate data fit <- kde1d(x, xmin = 0, deg = 1) # estimate density dkde1d(seq(0, 5, by = 1), fit) # evaluate density estimate #> [1] 2.410773e+02 3.409695e-01 1.155670e-01 3.952077e-02 8.081342e-03 #> [6] 1.124834e-03 summary(fit) # information about the estimate #> kernel density estimate ('kde1d'), log-linear with bounded support (xmin = 0) #> ----------------------------------------------------------------- #> nobs = 500, bw = 0.3, mult = 1, loglik = -450.93, d.f. = 12.9 plot(fit) # plot the density estimate curve(dgamma(x, shape = 1), # add true density   add = TRUE, col = \"red\",   from = 1e-3 )   ## discrete data x <- rbinom(500, size = 5, prob = 0.5) # simulate data fit <- kde1d(x, xmin = 0, xmax = 5, type = \"discrete\") # estimate density fit <- kde1d(ordered(x, levels = 0:5)) # alternative API dkde1d(sort(unique(x)), fit) # evaluate density estimate #> [1] 0.04748002 0.16131239 0.29095675 0.30368795 0.16312587 0.03343701 summary(fit) # information about the estimate #> (jittered) kernel density estimate ('kde1d'), log-quadratic with bounded support (xmin = 0, xmax = 5) #> ----------------------------------------------------------------- #> nobs = 500, bw = 1.12, mult = 1, loglik = -787.1, d.f. = 9.97 plot(fit) # plot the density estimate points(ordered(0:5, 0:5), # add true density   dbinom(0:5, 5, 0.5),   col = \"red\" )   ## zero-inflated data x <- rexp(500, 0.5)  # simulate data x[sample(1:500, 200)] <- 0 # add zero-inflation fit <- kde1d(x, xmin = 0, type = \"zi\") # estimate density dkde1d(sort(unique(x)), fit) # evaluate density estimate #>   [1] 0.400000000 0.945612842 0.818604772 0.455734119 0.241285265 0.242986240 #>   [7] 0.239167381 0.239154410 0.231873326 0.231640897 0.227679350 0.227941727 #>  [13] 0.228115875 0.228392329 0.231824469 0.247552599 0.248169414 0.260252361 #>  [19] 0.261285523 0.262636196 0.262659503 0.269860517 0.269903240 0.270833535 #>  [25] 0.271936266 0.274560461 0.274998734 0.275051204 0.275051598 0.275058072 #>  [31] 0.274965048 0.274787163 0.273439759 0.272843700 0.272798806 0.271098439 #>  [37] 0.270949734 0.268904505 0.266518146 0.266282392 0.265554419 0.264728933 #>  [43] 0.263746070 0.263157885 0.262355208 0.261344425 0.260831219 0.259501335 #>  [49] 0.257699690 0.256259201 0.254733183 0.252359067 0.250475476 0.250451070 #>  [55] 0.249547912 0.247046050 0.245742698 0.242230039 0.240353021 0.235931992 #>  [61] 0.235625216 0.233530170 0.232322117 0.231725028 0.231181064 0.228942127 #>  [67] 0.228521752 0.227339281 0.226756267 0.223378237 0.221814013 0.221657609 #>  [73] 0.220504553 0.219768537 0.217815832 0.217792479 0.216208100 0.216044564 #>  [79] 0.215289040 0.211472798 0.208772616 0.207023642 0.203385365 0.203116401 #>  [85] 0.202738336 0.202416527 0.202012524 0.201185662 0.198112696 0.198052873 #>  [91] 0.196916782 0.196161819 0.195055773 0.191700476 0.191195584 0.191033747 #>  [97] 0.190875647 0.190232786 0.189810615 0.188685031 0.187297745 0.186848618 #> [103] 0.185906792 0.184151531 0.182927571 0.179511318 0.179505204 0.179407086 #> [109] 0.179224982 0.178487524 0.177830785 0.175885063 0.175674130 0.175612183 #> [115] 0.174266449 0.173277186 0.172866408 0.172387381 0.172184461 0.172069992 #> [121] 0.171831508 0.171668891 0.171462740 0.170607133 0.170584930 0.167078293 #> [127] 0.166364257 0.164589397 0.164046885 0.163396158 0.160303249 0.159128368 #> [133] 0.158753576 0.158501369 0.157568714 0.156699594 0.156294792 0.156269744 #> [139] 0.155439131 0.152996531 0.152583810 0.151429575 0.150132787 0.150130705 #> [145] 0.148961791 0.147964566 0.147571037 0.146151379 0.145048276 0.144681234 #> [151] 0.144460651 0.142911339 0.140874340 0.140766451 0.140270247 0.139428589 #> [157] 0.139294810 0.138904895 0.137510490 0.137285210 0.136351395 0.135963510 #> [163] 0.135548099 0.135042017 0.134333283 0.132975594 0.132576341 0.132082915 #> [169] 0.131963904 0.130928272 0.130837149 0.130508460 0.129874170 0.128477526 #> [175] 0.127308598 0.127037929 0.125287130 0.122471857 0.121243431 0.120603974 #> [181] 0.119938923 0.116359186 0.114696110 0.112700486 0.112517497 0.111174686 #> [187] 0.110077949 0.107902693 0.107422847 0.107391683 0.107110394 0.107083800 #> [193] 0.106421623 0.105388996 0.103086575 0.102817083 0.100013063 0.099472444 #> [199] 0.098738360 0.098367301 0.098252232 0.096823135 0.095071456 0.092433981 #> [205] 0.091058378 0.089517563 0.088678100 0.088327634 0.088134003 0.087042462 #> [211] 0.086725308 0.086156363 0.083457498 0.083034471 0.078325207 0.077074038 #> [217] 0.075141391 0.075038380 0.074037735 0.073217029 0.073129061 0.071728456 #> [223] 0.071438505 0.071082225 0.070381092 0.069935289 0.069314466 0.067085731 #> [229] 0.061820488 0.060650953 0.059618183 0.058227504 0.057812511 0.057459024 #> [235] 0.056645143 0.055990558 0.054920423 0.054787931 0.053998641 0.053841419 #> [241] 0.051143627 0.050421651 0.050130110 0.047093342 0.046534293 0.045850161 #> [247] 0.042353628 0.042196234 0.042063118 0.041587525 0.040610509 0.040082131 #> [253] 0.038558727 0.033671878 0.033153718 0.031371246 0.030571636 0.030250131 #> [259] 0.029974120 0.029685048 0.028133386 0.027367576 0.026249164 0.025934372 #> [265] 0.025051620 0.024964171 0.024182951 0.023333896 0.018668197 0.017247140 #> [271] 0.015823147 0.014824248 0.014589536 0.014301296 0.013760137 0.013618208 #> [277] 0.012752531 0.011801894 0.011626021 0.011473442 0.010009840 0.009717812 #> [283] 0.008828965 0.007897291 0.007859096 0.007702932 0.007118582 0.007019149 #> [289] 0.006827551 0.006745428 0.006141251 0.004765744 0.004712858 0.004349564 #> [295] 0.004084267 0.003530677 0.003013191 0.002928466 0.002789458 0.001961111 #> [301] 0.001367393 summary(fit) # information about the estimate #> (zero-inflated) kernel density estimate ('kde1d'), log-quadratic with bounded support (xmin = 0) #> ----------------------------------------------------------------- #> nobs = 500, bw = 0.74, mult = 1, loglik = -696.52, d.f. = NaN plot(fit) # plot the density estimate lines(  # add true density   seq(0, 20, l = 100),   0.6 * dexp(seq(0, 20, l = 100), 0.5),   col = \"red\" ) points(0, 0.4, col = \"red\")   ## weighted estimate x <- rnorm(100) # simulate data weights <- rexp(100) # weights as in Bayesian bootstrap fit <- kde1d(x, weights = weights) # weighted fit plot(fit) # compare with unweighted fit lines(kde1d(x), col = 2)"},{"path":"https://tnagler.github.io/kde1d/reference/plot.kde1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting kde1d objects — plot.kde1d","title":"Plotting kde1d objects — plot.kde1d","text":"Plotting kde1d objects","code":""},{"path":"https://tnagler.github.io/kde1d/reference/plot.kde1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting kde1d objects — plot.kde1d","text":"","code":"# S3 method for class 'kde1d' plot(x, ...)  # S3 method for class 'kde1d' lines(x, ...)  # S3 method for class 'kde1d' points(x, ...)"},{"path":"https://tnagler.github.io/kde1d/reference/plot.kde1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting kde1d objects — plot.kde1d","text":"x kde1d object. ... arguments passed plot.default()","code":""},{"path":[]},{"path":"https://tnagler.github.io/kde1d/reference/plot.kde1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting kde1d objects — plot.kde1d","text":"","code":"## continuous data x <- rbeta(100, shape1 = 0.3, shape2 = 0.4) # simulate data fit <- kde1d(x) # unbounded estimate plot(fit, ylim = c(0, 4)) # plot estimate curve(dbeta(x, 0.3, 0.4), # add true density   col = \"red\", add = TRUE ) fit_bounded <- kde1d(x, xmin = 0, xmax = 1) # bounded estimate lines(fit_bounded, col = \"green\")   ## discrete data x <- rpois(100, 3) # simulate data x <- ordered(x, levels = 0:20) # declare variable as ordered fit <- kde1d(x) # estimate density plot(fit, ylim = c(0, 0.25)) # plot density estimate points(ordered(0:20, 0:20), # add true density values   dpois(0:20, 3),   col = \"red\" )   ## zero-inflated data x <- rexp(500, 0.5)  # simulate data x[sample(1:500, 200)] <- 0 # add zero-inflation fit <- kde1d(x, xmin = 0, type = \"zi\") # estimate density plot(fit) # plot the density estimate lines(  # add true density   seq(0, 20, l = 100),   0.6 * dexp(seq(0, 20, l = 100), 0.5),   col = \"red\" ) points(0, 0.4, col = \"red\")"},{"path":"https://tnagler.github.io/kde1d/news/index.html","id":"kde1d-110","dir":"Changelog","previous_headings":"","what":"kde1d 1.1.0","title":"kde1d 1.1.0","text":"NEW FEATURES Added functionality estimating zero-inflated discrete-continuous mixtures. New kde1d(..., type = \"...\") argument specify data type. Options {c, cont, continuous} continuous variables, {d, disc, discrete} discrete integer variables, {zi, zinfl, zero-inflated} zero-inflated variables. BREAKING CHANGE New C++ API, making easier use stand-alone.","code":""},{"path":"https://tnagler.github.io/kde1d/news/index.html","id":"kde1d-107","dir":"Changelog","previous_headings":"","what":"kde1d 1.0.7","title":"kde1d 1.0.7","text":"CRAN release: 2024-01-26 DEPENDS stop enforcing C++11.","code":""},{"path":"https://tnagler.github.io/kde1d/news/index.html","id":"kde1d-105","dir":"Changelog","previous_headings":"","what":"kde1d 1.0.5","title":"kde1d 1.0.5","text":"CRAN release: 2022-09-16 BUG FIXES fix cdf input checks NAs.","code":""},{"path":"https://tnagler.github.io/kde1d/news/index.html","id":"kde1d-104","dir":"Changelog","previous_headings":"","what":"kde1d 1.0.4","title":"kde1d 1.0.4","text":"CRAN release: 2022-03-16 BUG FIXES avoid bit-wise operations Boolean variables.","code":""},{"path":"https://tnagler.github.io/kde1d/news/index.html","id":"kde1d-103","dir":"Changelog","previous_headings":"","what":"kde1d 1.0.3","title":"kde1d 1.0.3","text":"CRAN release: 2020-10-26 BUG FIXES fix invisible output dkde1d().","code":""},{"path":"https://tnagler.github.io/kde1d/news/index.html","id":"kde1d-102","dir":"Changelog","previous_headings":"","what":"kde1d 1.0.2","title":"kde1d 1.0.2","text":"CRAN release: 2019-11-18 BUG FIXES Prevent false positive valgrind.","code":""},{"path":"https://tnagler.github.io/kde1d/news/index.html","id":"kde1d-101","dir":"Changelog","previous_headings":"","what":"kde1d 1.0.1","title":"kde1d 1.0.1","text":"CRAN release: 2019-11-15 DEPENDENCIES Removed dependence qrng (#46). BUG FIXES Fixed undefined behavior potential cause memory issues (#46). Prevent rare bw_ == NaN cases (#46). Fixed compiler warnings due unused uninitialized variables (#46).","code":""},{"path":"https://tnagler.github.io/kde1d/news/index.html","id":"kde1d-100","dir":"Changelog","previous_headings":"","what":"kde1d 1.0.0","title":"kde1d 1.0.0","text":"CRAN release: 2019-11-15 DEPENDENCIES removed dependency cctools. NEW FEATURES optimal plug-bandwidth selection polynomial degrees (#38). avoid randomness simplified, deterministic jittering, see equi_jitter() (#40). headers inst/include can used standalone C++ library convenience wrappers R (#41). (several times) faster pkde1d(), qkde1d(), rkde1d() due clever algorithm numerical integration (#42). faster kde1d() thanks Fast Fourier Transform (#43). BUG FIXES improvements numerical stability, inter- extrapolation (#32, #35, #37).","code":""},{"path":"https://tnagler.github.io/kde1d/news/index.html","id":"kde1d-040","dir":"Changelog","previous_headings":"","what":"kde1d 0.4.0","title":"kde1d 0.4.0","text":"CRAN release: 2019-04-11 NEW FEATURE allow weights observations via kde1d(..., weights = ) (#29). BUG FIX stabilized bandwidth selection presence ties outliers. keep debug symbols Linux systems (following request Prof. Ripley).","code":""},{"path":"https://tnagler.github.io/kde1d/news/index.html","id":"kde1d-020","dir":"Changelog","previous_headings":"","what":"kde1d 0.2.0","title":"kde1d 0.2.0","text":"CRAN release: 2018-05-07 NEW FEATURES improved stability density estimates near boundary (#21). BUG FIXES consistent behavior dkde1d() pkde1d() called non-ordered input although data discrete (#19). fixed bug computation kernel density estimates (#20). adapt minimum bw allowed discrete data truncated Gaussian kernel (#20).","code":""},{"path":"https://tnagler.github.io/kde1d/news/index.html","id":"kde1d-012","dir":"Changelog","previous_headings":"","what":"kde1d 0.1.2","title":"kde1d 0.1.2","text":"CRAN release: 2018-04-17 NEW FEATURES Faster interpolation using binary search find cells (#17). BUG FIXES Fixed heap buffer overflows interpolation routines (#15, #16). Fixed bounds cdf fit discrete data long doubles supported (#16).","code":""},{"path":"https://tnagler.github.io/kde1d/news/index.html","id":"kde1d-010","dir":"Changelog","previous_headings":"","what":"kde1d 0.1.0","title":"kde1d 0.1.0","text":"CRAN release: 2018-03-26 Initial release.","code":""}]
